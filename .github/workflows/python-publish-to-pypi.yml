name: Upload Python Package to PyPi

on:
  workflow_dispatch:
    inputs:
      increment-type:
        type: choice
        description: Increment type
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  id-token: write

jobs:
  generate-new-package-version:
    name: Generate new package version
    runs-on: ubuntu-latest

    outputs:
      PACKAGE_VERSION: ${{ steps.get-package-version.outputs.PACKAGE_VERSION }}
      NEW_PACKAGE_VERSION: ${{ steps.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version from pyproject.toml
        id: get-package-version
        uses: ./.github/actions/get-package-version

      - name: Generate new package version
        id: generate-new-package-version
        run: |
          # Parse package version
          IFS='.' read -r major minor patch <<< "${{ steps.get-package-version.outputs.PACKAGE_VERSION }}"

          # Increment version
          if [ "${{ github.event.inputs.increment-type }}" = "major" ]; then
            major=$((major + 1))
          fi

          if [ "${{ github.event.inputs.increment-type }}" = "minor" ]; then
            minor=$((minor + 1))
          fi

          if [ "${{ github.event.inputs.increment-type }}" = "patch" ]; then
            patch=$((patch + 1))
          fi
          
          NEW_PACKAGE_VERSION="$major.$minor.$patch"
          echo "New package version: $NEW_PACKAGE_VERSION"

          # Set new package version as output variable
          echo "NEW_PACKAGE_VERSION=$NEW_PACKAGE_VERSION" >> $GITHUB_OUTPUT

  build-distribution-package:
    name: Build distribution package
    needs: [generate-new-package-version]
    uses: ./.github/workflows/build-distribution-package.yml
    with:
      PACKAGE_VERSION: ${{ needs.generate-new-package-version.outputs.PACKAGE_VERSION }}
      NEW_PACKAGE_VERSION: ${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}

  upload-pypi:
    name: Upload package to PyPi
    needs: [build-distribution-package]
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/tradeflow

    permissions:
      id-token: write

    steps:
      - name: Unpacks all CIBW artifacts into dist/
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/

  verify-uploaded-content-pypi:
    name: Verify Uploaded Package Content on PyPi
    needs: [generate-new-package-version, upload-pypi]
    uses: ./.github/workflows/verify-uploaded-package-content.yml
    with:
      package-index: pypi
      package-version: ${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}

  wait-before-check:
    # Wait some time before installing the package, otherwise it might not install the freshly uploaded version
    name: Wait before checking package installation
    needs: [upload-pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for 4 minutes
        run: sleep 240

  increment-package-version:
    name: Increment package version
    needs: [generate-new-package-version, upload-pypi]
    runs-on: ubuntu-latest
    env:
      PACKAGE_VERSION: ${{ needs.generate-new-package-version.outputs.PACKAGE_VERSION }}
      NEW_PACKAGE_VERSION: ${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.BOT_ACCESS_TOKEN }}

      - name: Replace package version in pyproject.toml
        run: |
          sed -i "s+version = \"$PACKAGE_VERSION\"+version = \"$NEW_PACKAGE_VERSION\"+g" pyproject.toml

      - name: Push new version
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git commit -m "Increment package version to ${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }} [skip ci]"
          git push
#          git checkout -b "increment-version-${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}"
#          git push origin --set-upstream "increment-version-${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}"
#          git push origin HEAD:main

  release:
    name: Create Release
    needs: [generate-new-package-version, increment-package-version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_VERSION: ${{ needs.generate-new-package-version.outputs.PACKAGE_VERSION }}
          NEW_PACKAGE_VERSION: ${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}
        run: |
          gh release create "v$NEW_PACKAGE_VERSION" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release $NEW_PACKAGE_VERSION" \
              --generate-notes

  check-package-installation-and-usage-pypi:
    name: Install package from PyPi and test basic functionality
    needs: [generate-new-package-version, wait-before-check]
    uses: ./.github/workflows/check-package-installation-and-usage.yml
    with:
      package-index: pypi
      package-version: ${{ needs.generate-new-package-version.outputs.NEW_PACKAGE_VERSION }}
      install-default-version: true
