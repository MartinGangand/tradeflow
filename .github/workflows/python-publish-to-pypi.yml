name: Upload Python Package to PyPi

on:
  pull_request:
  workflow_dispatch:
    inputs:
      increment-type:
        type: choice
        description: Increment type
        options:
          - patch
          - minor
          - major
  release:
    types:
      - published

permissions:
  contents: write

jobs:
  update-package-version:
    name: Update package version
    runs-on: ubuntu-latest

    outputs:
      NEW_PACKAGE_VERSION: ${{ steps.construct-new-package-version.outputs.NEW_PACKAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version from pyproject.toml
        id: get-package-version
        run: |
          PACKAGE_VERSION=$(grep ^version pyproject.toml | cut -d '"' -f 2)
          echo "Package version: $PACKAGE_VERSION"

          # Set package version as output variable
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Construct new package version
        id: construct-new-package-version
        run: |
          # Parse package version
          IFS='.' read -r major minor patch <<< "${{ steps.get-package-version.outputs.PACKAGE_VERSION }}"

          # Increment version
          if [ "${{ github.event.inputs.increment-type }}" = "major" ]; then
            major=$((major + 1))
          fi

          if [ "${{ github.event.inputs.increment-type }}" = "minor" ]; then
            minor=$((minor + 1))
          fi

          if [ "${{ github.event.inputs.increment-type }}" = "patch" ]; then
            patch=$((patch + 1))
          fi
          
          NEW_PACKAGE_VERSION="$major.$minor.$patch"
          echo "New package version: $NEW_PACKAGE_VERSION"

          # Set new package version as output variable
          echo "NEW_PACKAGE_VERSION=$NEW_PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Replace package version in pyproject.toml
        run: |
          sed -i "s+version = \"${{ steps.get-package-version.outputs.PACKAGE_VERSION }}\"+version = \"${{ steps.construct-new-package-version.outputs.NEW_PACKAGE_VERSION }}\"+g" pyproject.toml

      #TODO: REMOVE AND MOVE TO BUILD-DISTRIBUTION-PACKAGE?
      - name: Upload updated pyproject.toml as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyproject-toml
          path: pyproject.toml

  build-distribution-package:
    name: Build distribution package
    needs: [update-package-version]
    uses: ./.github/workflows/build-distribution-package.yml

  upload-pypi:
    name: Upload package to PyPi
    needs: [build-distribution-package]
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/tradeflow

    permissions:
      id-token: write

#    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Unpacks all CIBW artifacts into dist/
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/

  release:
    name: Create Release
    needs: [update-package-version, upload-pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "release-${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="release-${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }}" \
              --generate-notes

#  TODO: use reusable workflow for this
  verify-uploaded-content-pypi:
    name: Run script to verify the uploaded content on PyPi
    needs: [update-package-version, upload-pypi]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.6'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts-requirements.txt

      - name: Run script with index 'pypi'
        run: python -m scripts.pypi_verify_uploaded_content pypi ${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }}

#  TODO: use reusable workflow for this
  check-package-installation-and-usage-pypi:
    name: Install package from PyPi and test basic functionality
    needs: [update-package-version, upload-pypi]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest, macos-13, macos-latest, windows-2019, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Wait some time before installing the package, otherwise it might not install the freshly uploaded version
      - name: Sleep for 4 minutes
        run: sleep 240

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts-requirements.txt

      - name: Run script with index 'pypi'
        run: python -m scripts.check_package_installation_and_usage pypi ${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }} --install_default_version

  increment-package-version:
    name: Increment package version
    needs: [update-package-version, upload-pypi]
    runs-on: ubuntu-latest
    env:
      PACKAGE_VERSION: ${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.BOT_ACCESS_TOKEN }}

      - name: Replace package version in pyproject.toml
        run: |
          sed -i "s+version = \"$PACKAGE_VERSION\"+version = \"${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }}\"+g" pyproject.toml

      - name: Push new version
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git checkout -b "increment-version-${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }}"
          git commit -m "Increment package version to ${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }} [skip ci]"
          git push origin --set-upstream "increment-version-${{ needs.update-package-version.outputs.NEW_PACKAGE_VERSION }}"
#          git push origin HEAD:main
