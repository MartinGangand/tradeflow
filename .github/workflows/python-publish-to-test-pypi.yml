name: Upload Python Package to Test PyPi

on:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  generate-dev-package-version:
    name: Generate development package version
    runs-on: ubuntu-latest

    outputs:
      PACKAGE_VERSION: ${{ steps.get-package-version.outputs.PACKAGE_VERSION }}
      DEV_PACKAGE_VERSION: ${{ steps.generate-dev-package-version.outputs.DEV_PACKAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version from pyproject.toml
        id: get-package-version
        uses: ./.github/actions/get-package-version

      - name: Generate development package version
        id: generate-dev-package-version
        run: |
          CURRENT_DATE_TIME=$(date +"%Y.%-m.%-d.%-H.%-M.%-S")
          DEV_PACKAGE_VERSION="${{ steps.get-package-version.outputs.PACKAGE_VERSION }}.$CURRENT_DATE_TIME"
          echo "Development package version: $DEV_PACKAGE_VERSION"

          # Set dev package version as output variable
          echo "DEV_PACKAGE_VERSION=$DEV_PACKAGE_VERSION" >> $GITHUB_OUTPUT

#  build-distribution-package:
#    name: Build distribution package
#    needs: [generate-dev-package-version]
#    uses: ./.github/workflows/build-distribution-package.yml
#    with:
#      PACKAGE_VERSION: ${{ needs.generate-dev-package-version.outputs.PACKAGE_VERSION }}
#      NEW_PACKAGE_VERSION: ${{ needs.generate-dev-package-version.outputs.DEV_PACKAGE_VERSION }}

#  upload-test-pypi:
#    name: Upload Package to Test PyPi
#    needs: [build-distribution-package]
#    runs-on: ubuntu-latest
#
#    environment:
#      name: testpypi
#      url: https://test.pypi.org/p/tradeflow
#
#    permissions:
#      id-token: write
#
#    steps:
#      - name: Unpacks all CIBW artifacts into dist/
#        uses: actions/download-artifact@v4
#        with:
#          pattern: cibw-*
#          path: dist
#          merge-multiple: true
#
#      - name: Publish release distributions to Test PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          repository-url: https://test.pypi.org/legacy/
  upload-test-pypi:
    name: Upload package to Test PyPi
    needs: [generate-dev-package-version]
    uses: ./.github/workflows/publish-to-pypi.yml
    with:
      PACKAGE_VERSION: ${{ needs.generate-dev-package-version.outputs.PACKAGE_VERSION }}
      NEW_PACKAGE_VERSION: ${{ needs.generate-dev-package-version.outputs.NEW_PACKAGE_VERSION }}
      package-index: test.pypi

  verify-uploaded-content-test-pypi:
    name: Verify Uploaded Package Content on Test PyPi
    needs: [generate-dev-package-version, upload-test-pypi]
    uses: ./.github/workflows/verify-uploaded-package-content.yml
    with:
      package-index: test.pypi
      package-version: ${{ needs.generate-dev-package-version.outputs.DEV_PACKAGE_VERSION }}

  wait-before-check:
    # Wait some time before installing the package, otherwise it might not install the freshly uploaded version
    name: Wait before checking package installation
    needs: [upload-test-pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for 4 minutes
        run: sleep 240

  check-package-installation-and-usage-test-pypi:
    name: Install package from Test PyPi and test basic functionality
    needs: [generate-dev-package-version, wait-before-check]
    uses: ./.github/workflows/check-package-installation-and-usage.yml
    with:
      package-index: test.pypi
      package-version: ${{ needs.generate-dev-package-version.outputs.DEV_PACKAGE_VERSION }}
      install-default-version: true
